/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class DependencyLink : TBase
{
  private string _parent;
  private string _child;
  private Moments _duration_moments;

  public string Parent
  {
    get
    {
      return _parent;
    }
    set
    {
      __isset.parent = true;
      this._parent = value;
    }
  }

  public string Child
  {
    get
    {
      return _child;
    }
    set
    {
      __isset.child = true;
      this._child = value;
    }
  }

  public Moments Duration_moments
  {
    get
    {
      return _duration_moments;
    }
    set
    {
      __isset.duration_moments = true;
      this._duration_moments = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool parent;
    public bool child;
    public bool duration_moments;
  }

  public DependencyLink() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Parent = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            Child = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Struct) {
            Duration_moments = new Moments();
            Duration_moments.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("DependencyLink");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Parent != null && __isset.parent) {
      field.Name = "parent";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Parent);
      oprot.WriteFieldEnd();
    }
    if (Child != null && __isset.child) {
      field.Name = "child";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Child);
      oprot.WriteFieldEnd();
    }
    if (Duration_moments != null && __isset.duration_moments) {
      field.Name = "duration_moments";
      field.Type = TType.Struct;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      Duration_moments.Write(oprot);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("DependencyLink(");
    bool __first = true;
    if (Parent != null && __isset.parent) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Parent: ");
      __sb.Append(Parent);
    }
    if (Child != null && __isset.child) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Child: ");
      __sb.Append(Child);
    }
    if (Duration_moments != null && __isset.duration_moments) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Duration_moments: ");
      __sb.Append(Duration_moments== null ? "<null>" : Duration_moments.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

