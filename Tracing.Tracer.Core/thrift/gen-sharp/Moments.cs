/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Moments : TBase
{
  private long _m0;
  private double _m1;
  private double _m2;
  private double _m3;
  private double _m4;

  public long M0
  {
    get
    {
      return _m0;
    }
    set
    {
      __isset.m0 = true;
      this._m0 = value;
    }
  }

  public double M1
  {
    get
    {
      return _m1;
    }
    set
    {
      __isset.m1 = true;
      this._m1 = value;
    }
  }

  public double M2
  {
    get
    {
      return _m2;
    }
    set
    {
      __isset.m2 = true;
      this._m2 = value;
    }
  }

  public double M3
  {
    get
    {
      return _m3;
    }
    set
    {
      __isset.m3 = true;
      this._m3 = value;
    }
  }

  public double M4
  {
    get
    {
      return _m4;
    }
    set
    {
      __isset.m4 = true;
      this._m4 = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool m0;
    public bool m1;
    public bool m2;
    public bool m3;
    public bool m4;
  }

  public Moments() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I64) {
            M0 = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Double) {
            M1 = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Double) {
            M2 = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.Double) {
            M3 = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.Double) {
            M4 = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("Moments");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.m0) {
      field.Name = "m0";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(M0);
      oprot.WriteFieldEnd();
    }
    if (__isset.m1) {
      field.Name = "m1";
      field.Type = TType.Double;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(M1);
      oprot.WriteFieldEnd();
    }
    if (__isset.m2) {
      field.Name = "m2";
      field.Type = TType.Double;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(M2);
      oprot.WriteFieldEnd();
    }
    if (__isset.m3) {
      field.Name = "m3";
      field.Type = TType.Double;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(M3);
      oprot.WriteFieldEnd();
    }
    if (__isset.m4) {
      field.Name = "m4";
      field.Type = TType.Double;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(M4);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Moments(");
    bool __first = true;
    if (__isset.m0) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("M0: ");
      __sb.Append(M0);
    }
    if (__isset.m1) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("M1: ");
      __sb.Append(M1);
    }
    if (__isset.m2) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("M2: ");
      __sb.Append(M2);
    }
    if (__isset.m3) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("M3: ");
      __sb.Append(M3);
    }
    if (__isset.m4) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("M4: ");
      __sb.Append(M4);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

